#Git comands

# Possíveis estados do git:
working directory, index e HEAD
	working directory representa o estado atual dos arquivos no repositório. Podemos utilizar o comando git add para adicioná-los ao index, ou staging area, que representa uma visão preliminar das modificações que queremos definir para nosso projeto, comparando essas ao HEAD, o último passo completo do nosso projeto, que serve de referência para comparação do trabalho com o working directory.

# Transforma um diretório comum em um repositório git
git init

# Lista os arquivos e diretórios que são controlados pelo git
git ls-files

# Exibe o status dos arquivos do projeto
git status

# CONFIG
git config user.name "Maikel Sperandio"				# Adiciona configurações de usuário, pode-se incluir o atributo --global pra funcionar para todos os repositórios
git config user.email "maikelsperandio@gmail.com"	# Adiciona configurações de usuário, pode-se incluir o atributo --global pra funcionar para todos os repositórios

# ADD
git add -v . 					# Adiciona arquivos ao git
git add arquivo1 arquivo2		# Adiciona arquivos ao git
git add caminhoDeUmDiretorio 	# Adiciona arquivos ao git

# COMMIT
git commit -m "Mensagem de commit" -v . 	# Faz o commit, o parâmetro -m é a mensagem de commit.

# REMOTE
git remote 		# Exibe os repositórios remotos configurados no git local
git remote -v	# Exibe os repositórios remotos configurados no git local
git remote add [alias_do_repositorio] [uri_do_repositorio] 					 # Adiciona ao git um repositório remoto
git remote add origin https://github.com/[seu_nome_de_usuario]/curso-git.git # Origin é o nome do repositório

# PUSH
git push origin master 		# Faz o envio dos arquivos para um repositório remoto identificado por "origin"
	Outra alternativa é utilizar, no primeiro push, a opção -u ou --set-upstream. Ela atrela a branch remota à local, fazendo com que não seja mais necessário passar como parâmetros a origem e a branch no comando push, que fica então assim: git push.
git push -u origin design 	# Cria a branch remota design no repositório referente ao origin e faz uma ligação entre a nossa branch e a branch remota.
git push -d origin design 	# Esse comando remove uma branch remota
git push origin :design 	# Esse comando remove a branch remota "design"

# LOG
git log 			# Exibe o log dos commits feitos
git whatchanged		# Exibe o log mais detalhado dos commits
git whatchanged -p # Exibe quais linhas foram alteradas

# BRANCHES
git branch 			# Exibe as branches existentes no repositório local
git branch -r 		# Exibe as branches existentes no repositório remoto
git branch design 	# Cria uma nova branch chamada design
git fetch origin 	# Este comando verifica todas as atualizações que foram realizadas no repositório de atalho origin.
git branch -t design origin/design 	# Esse comando cria uma branch local chamada design fazendo o vínculo com a branch remota com o mesmo nome.

# PULL
git pull 			# Atualiza o código local com o código remoto, se houver novas branches no remoto elas serão baixadas.

# CHEKOUT
git checkout design 			# Muda a branch de trabalho
git checkout index.html			# Volta o arquivo index.html ao original, ou seja, faz um revert no arquivo desde que este não esteja no estado de *index*
git checkout -r design 			# Cria uma nova branch chamada design e já aponta o repositório local para essa nova branch
git checkout -t origin/design	# Esse comando faz os 3 passos de uma vez só: 1 - Cria uma branch local com o mesmo nome da branch remota; 2 - Muda para essa nova branch criada; 3 - Cria o link entre a branch local e remota

# RESET
git reset HEAD index.html 							# Volta o arquivo ao estado que estava no HEAD, com isso ele volta ao status que estava antes de ser dado o *git add*
git reset 8b72aabdd2a24cc4a6df0a431f8ed0d057df11f2 	# Volta ao commit identificado pelo hash.

# STASH
git stash					# Guarda as alterações em um lugar temporário para que seja possível voltar a elas posteriormente.
git stash pop				# Volta as alterações para um estado em que seja possível continuar.
git stash list				# Lista as alterações que estão guardadas no stash. Essa listagem mostra um identificador em cada arquivo guardado no stash.
git stash apply stash{0}	# Volta o stash específico.

# REBASE
git rebase 							# Atualiza o conteúdo de uma branch com base em outra branch
git rebase master desenvolvimento.	# O primeiro argumento é a branch base que vai ser usada para atualizar a outra branch, no caso a branch desenvolvimento será atualizada conforme o status da branch master.
git rebase --continue 				# Continua com o processo de merge entre as duas branches.

# MERGE TOOLS
Para saber mais, execute o comando git mergetool --help no terminal e veja as opções possíveis.
Algumas das ferramentas gratuitas mais comuns são o kdiff3, Meld ou P4Merge. Em MacOSX também existe o semi-nativo FileMerge, que vem junto com o XCode.